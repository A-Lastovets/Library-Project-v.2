import logging
from contextlib import asynccontextmanager
from logging.config import dictConfig

from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from app.config import LogConfig
from app.dependencies.cache import redis_client
from app.dependencies.database import SessionLocal, init_db
from app.middlewares.middlewares import setup_middlewares
from app.roles import create_admin
from app.routers import (
    auth,
    general_crud_books,
    general_reservations,
    librarian_crud_books,
    librarian_reservations,
    statistics,
    user_crud_books,
    user_reservations,
    chat_router,
)

dictConfig(LogConfig().dict())
logger = logging.getLogger("app")


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å–∞–º–∏ –ø—ñ–¥ —á–∞—Å –∂–∏—Ç—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É API"""

    try:
        await init_db()  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å –ë–î

        async with SessionLocal() as db:
            await create_admin(db)  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞

        redis = await redis_client.get_redis()  # –û—Ç—Ä–∏–º—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        if redis:
            logger.info("‚úÖ Redis —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
        else:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Redis!")

        yield

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        raise e

    finally:
        await redis_client.close_redis()
        logger.info("üî¥ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis –∑–∞–∫—Ä–∏—Ç–æ")


app = FastAPI(
    lifespan=lifespan,
    title="Library API",
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–æ—é",
    version="1.0",
    swagger_ui_parameters={"persistAuthorization": True},
)

setup_middlewares(app)

app.include_router(auth.router, prefix="/api/v1")
app.include_router(general_crud_books.router, prefix="/api/v1")
app.include_router(general_reservations.router, prefix="/api/v1")
app.include_router(librarian_crud_books.router, prefix="/api/v1")
app.include_router(librarian_reservations.router, prefix="/api/v1")
app.include_router(user_crud_books.router, prefix="/api/v1")
app.include_router(user_reservations.router, prefix="/api/v1")
app.include_router(statistics.router, prefix="/api/v1")
app.include_router(chat_router.router, prefix="/api/v1")


# app.mount("/html", StaticFiles(directory="app/templates"), name="html")


logger.info("‚úÖ Library API —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
