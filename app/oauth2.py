import re
import base64
from typing import Optional
from fastapi import HTTPException
from passlib.context import CryptContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.services.user_service import get_user_by_email

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


async def update_password(db: AsyncSession, email: str, new_password: str):
    user = await get_user_by_email(db, email)
    if not user:
        return None

    validate_password_schema(new_password)
    user.hashed_password = pwd_context.hash(new_password)
    await db.commit()
    return user


def validate_password(password: str):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–∞—Ä–æ–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º –±–µ–∑–ø–µ–∫–∏:
    - –ú—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤
    - –•–æ—á–∞ –± –æ–¥–Ω–∞ –≤–µ–ª–∏–∫–∞ –ª—ñ—Ç–µ—Ä–∞
    - –•–æ—á–∞ –± –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞
    - –•–æ—á–∞ –± –æ–¥–∏–Ω —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª (!@#$%^&*()_+ —ñ —Ç.–¥.)
    """
    if len(password) < 8:
        raise HTTPException(
            status_code=400,
            detail="Password must be at least 8 characters long.",
        )
    if not re.search(r"[A-Z]", password):
        raise HTTPException(
            status_code=400,
            detail="Password must contain at least one uppercase letter.",
        )
    if not re.search(r"\d", password):
        raise HTTPException(
            status_code=400,
            detail="Password must contain at least one digit.",
        )
    if not re.search(r"[!@#$%^&*(),.?\":{}|<>]", password):
        raise HTTPException(
            status_code=400,
            detail="Password must contain at least one special character.",
        )
    return password


def validate_password_schema(password: str):
    """
    –í–µ—Ä—Å—ñ—è `validate_password`, —è–∫–∞ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ Pydantic-—Å—Ö–µ–º–∞—Ö
    (–≤–∏–∫–∏–¥–∞—î ValueError –∑–∞–º—ñ—Å—Ç—å HTTPException).
    """
    if len(password) < 8:
        raise ValueError("Password must be at least 8 characters long.")
    if not any(c.isupper() for c in password):
        raise ValueError("Password must contain at least one uppercase letter.")
    if not any(c.isdigit() for c in password):
        raise ValueError("Password must contain at least one digit.")
    if not any(c in '!@#$%^&*(),.?":{}|<>' for c in password):
        raise ValueError("Password must contain at least one special character.")
    return password

def is_valid_base64(data: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —Ä—è–¥–æ–∫ –¥—ñ–π—Å–Ω–∏–º Base64"""
    try:
        if data.startswith(
            "data:image",
        ):  # üîπ –í–∏–¥–∞–ª—è—î–º–æ `data:image/png;base64,` —è–∫—â–æ —î
            print("Detected data:image, stripping prefix")  # üõ† –õ–æ–≥—É–≤–∞–Ω–Ω—è
            data = data.split(",")[1]
        base64.b64decode(data, validate=True)
        return True
    except Exception as e:
        print(f"‚ùå Invalid Base64: {e}")  # üõ† –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
        return False


def validate_cover_image(cover_image: Optional[str]):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å cover_image —É —Ñ–æ—Ä–º–∞—Ç—ñ Base64."""
    if cover_image:
        print("Checking Base64 validity...")
        if not is_valid_base64(cover_image):
            raise HTTPException(
                status_code=400,
                detail="Invalid cover_image format. Expected a valid Base64 string.",
            )
        print("‚úÖ Base64 is valid!")
