import logging
import os

from fastapi import HTTPException
from passlib.context import CryptContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.models.user import User
from app.schemas.schemas import UserCreate
from app.services.user_service import get_user_by_email

logger = logging.getLogger("app")

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


async def create_admin(db: AsyncSession):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞."""

    admin_username = os.getenv("ADMIN_USERNAME", "Admin")
    admin_lastname = "Admin"
    admin_email = os.getenv("ADMIN_EMAIL")
    admin_password = os.getenv("ADMIN_PASS")

    if not admin_email or not admin_password:
        logger.warning(
            "‚ö†Ô∏è ADMIN_EMAIL –∞–±–æ ADMIN_PASS –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤ .env! –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑ —Ç–∞–∫–∏–º email
    result = await db.execute(select(User).where(User.email == admin_email))
    existing_admin = result.scalar_one_or_none()

    if existing_admin:
        logger.info(
            f"‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_username} –≤–∂–µ —ñ—Å–Ω—É—î. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è.",
        )
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin = User(
        first_name=admin_username,
        last_name=admin_lastname,
        email=admin_email,
        hashed_password=pwd_context.hash(admin_password),
        role="librarian",
        is_blocked=False,
    )

    db.add(admin)
    await db.commit()
    logger.info(f"üÜï –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_username} —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ!")


async def create_user(db: AsyncSession, user_data: UserCreate, role: str):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±–µ–∑ —è–≤–Ω–æ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–∞—Ä–æ–ª—è (–±–æ –≤–æ–Ω–∞ –≤–∂–µ –≤ `UserCreate`)."""

    existing_user = await get_user_by_email(db, user_data.email)
    if existing_user:
        raise HTTPException(status_code=400, detail="Email already registered")

    user = User(
        first_name=user_data.first_name.capitalize(),
        last_name=user_data.last_name.capitalize(),
        email=user_data.email.lower(),
        hashed_password=pwd_context.hash(user_data.password),
        role=role,
        is_blocked=False,
    )
    db.add(user)
    await db.commit()
    await db.refresh(user)
    return user
