import logging

from fastapi import APIRouter, Depends, HTTPException, Request, status
from fastapi.security import OAuth2PasswordRequestForm
from pydantic import ValidationError
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import config
from app.dependencies.cache import redis_client
from app.dependencies.database import get_db
from app.models.user import User
from app.oauth2 import update_password, validate_password
from app.roles import create_user
from app.schemas.schemas import (
    BulkUpdateRequest,
    BulkUpdateResponse,
    LoginRequest,
    LogoutResponse,
    PasswordReset,
    PasswordResetRequest,
    Token,
    UserCreate,
    UserResponse,
)
from app.services.email_tasks import send_password_reset_email, send_welcome_email
from app.services.user_service import (
    authenticate_user,
    get_user_by_email,
    librarian_required,
)
from app.utils import (
    create_access_token,
    create_password_reset_token,
    create_refresh_token,
    decode_jwt_token,
)

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/auth", tags=["Auth"])


# üîë –õ–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–æ—Ç—Ä–∏–º–∞–Ω–Ω—è JWT-—Ç–æ–∫–µ–Ω–∞)
@router.post("/sign-in", response_model=Token, status_code=status.HTTP_200_OK)
async def sign_in(
    request: Request,
    login_data: LoginRequest,
    db: AsyncSession = Depends(get_db),
):
    """‚úÖ –í—Ö—ñ–¥ —á–µ—Ä–µ–∑ JSON"""

    raw_body = await request.json()
    print("Received raw JSON:", raw_body)

    try:
        login_data = LoginRequest(**raw_body)
        print("Parsed LoginRequest:", login_data.model_dump())
    except ValidationError as e:
        print("Validation Error:", e.json())  # –õ–æ–≥–∏ –¥–ª—è –¥–µ–±–∞–≥—É
        raise HTTPException(status_code=422, detail=e.errors())

    if login_data.email is None or login_data.password is None:
        raise HTTPException(status_code=400, detail="Email and password are required")

    user = await authenticate_user(db, str(login_data.email), str(login_data.password))
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail={
                "error": "Invalid Credentials",
                "message": "Invalid email or password. Please check your credentials and try again.",
                "suggestion": "If you forgot your password, use the password recovery option.",
            },
        )

    access_token = create_access_token(user)
    refresh_token = create_refresh_token(user)

    return Token(
        access_token=access_token,
        refresh_token=refresh_token,
        token_type="bearer",
    )


# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.post("/sign-up", response_model=Token, status_code=status.HTTP_201_CREATED)
async def sign_up(user: UserCreate, db: AsyncSession = Depends(get_db)):
    existing_user = await get_user_by_email(db, user.email)
    if existing_user:
        error_detail = {
            "error": "User Already Exists",
            "message": "A user with this email is already registered.",
            "suggestion": "Try logging in or use password recovery.",
        }
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=error_detail,
        )

    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    validate_password(user.password)

    role = (
        "librarian"
        if user.secret_code and user.secret_code.strip() == config.SECRET_LIBRARIAN_CODE
        else "reader"
    )

    created_user = await create_user(db, user, role)

    access_token = create_access_token(created_user)
    refresh_token = create_refresh_token(created_user)

    send_welcome_email(user.email, user.first_name)

    return Token(
        access_token=access_token,
        refresh_token=refresh_token,
        token_type="bearer",
    )


@router.post("/logout", response_model=LogoutResponse, status_code=200)
async def logout(refresh_token: str):
    """–í–∏—Ö—ñ–¥ —ñ–∑ —Å–∏—Å—Ç–µ–º–∏ (–≤—ñ–¥–∫–ª–∏–∫–∞–Ω–Ω—è `refreshToken`)."""

    redis = await redis_client.get_redis()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–æ–∫–µ–Ω –≤–∂–µ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–æ
    if await redis.exists(f"blacklist:{refresh_token}"):
        raise HTTPException(status_code=401, detail="Token already revoked")

    # –î–µ–∫–æ–¥—É—î–º–æ —Ç–æ–∫–µ–Ω (–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –π–æ–≥–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å)
    try:
        decode_jwt_token(refresh_token)  # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–æ–∫–µ–Ω –¥—ñ–π—Å–Ω–∏–π
    except HTTPException:
        raise HTTPException(status_code=401, detail="Invalid refresh token")

    # –î–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω —É —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ Redis (–Ω–∞ —Ç–æ–π –∂–µ —Ç–µ—Ä–º—ñ–Ω, —â–æ —ñ –π–æ–≥–æ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó)
    await redis.setex(f"blacklist:{refresh_token}", 7 * 24 * 60 * 60, "revoked")
    logger.info(f"Refresh token revoked: {refresh_token}")

    return {"message": "Successfully logged out"}


# –ó–∞–ø–∏—Ç –Ω–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
@router.post("/password-recovery", status_code=status.HTTP_200_OK)
async def request_password_reset(
    data: PasswordResetRequest,
    db: AsyncSession = Depends(get_db),
):
    redis = await redis_client.get_redis()
    user = await get_user_by_email(db, data.email)
    # –ó–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–¥–Ω–∞–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –±–µ–∑–ø–µ–∫–∏
    response_message = {
        "message": "If an account with that email exists, a password reset email has been sent.",
    }

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î ‚Äî –æ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if not user:
        return response_message

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î, —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–æ–∫–µ–Ω —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email
    token = create_password_reset_token(user.email)
    await redis.setex(
        f"password-reset:{token}",
        config.RESET_TOKEN_EXPIRE_MINUTES * 60,
        user.email,
    )

    reset_link = f"{config.FRONTEND_URL}/reset-password?token={token}"
    send_password_reset_email(user.email, reset_link)

    return response_message


# –°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è (–ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
@router.post("/password-reset", status_code=status.HTTP_200_OK)
async def reset_password(
    data: PasswordReset,
    db: AsyncSession = Depends(get_db),
):
    redis = await redis_client.get_redis()
    try:
        email = await redis.get(f"password-reset:{data.token}")
        if not email:
            logger.warning(f"Invalid or expired token: {data.token}")
            raise HTTPException(status_code=400, detail="Invalid or expired token")

    except Exception as e:
        logger.error(f"Error accessing Redis: {e}")
        raise HTTPException(
            status_code=500,
            detail="Temporary server issue. Try again later. Invalid or expired token.",
        )

    user = await get_user_by_email(db, email)
    if not user:
        logger.warning(f"User not found for email: {email}")
        raise HTTPException(status_code=404, detail="User not found")

    try:
        validate_password(data.new_password)
    except ValueError as e:
        logger.warning(
            f"Invalid password attempt for user {email}: {e}",
        )
        raise HTTPException(status_code=400, detail=str(e))

    if not await update_password(db, user.email, data.new_password):
        logger.error(
            f"Failed to update password for user {email}",
        )  # –õ–æ–≥ —è–∫—â–æ –ø–∞—Ä–æ–ª—å –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è
        raise HTTPException(
            status_code=500,
            detail="Could not update password. Try again later.",
        )
    # –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–∫–µ–Ω —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    await redis.delete(f"password-reset:{data.token}")

    logger.info(f"Password reset successful for {email}")
    return {"message": "Password has been reset successfully. Please log in again."}


# –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è librarian)
@router.get("/users", response_model=list[UserResponse], status_code=status.HTTP_200_OK)
async def get_all_users(
    db: AsyncSession = Depends(get_db),
    _: dict = Depends(librarian_required),
):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è librarian)."""

    result = await db.execute(select(User))
    users = result.scalars().all()

    return [UserResponse.model_validate(user) for user in users]


@router.patch("/users/block", response_model=BulkUpdateResponse)
async def block_users(
    request: BulkUpdateRequest,
    db: AsyncSession = Depends(get_db),
    librarian: dict = Depends(librarian_required),
):
    """–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –∞–±–æ –∫—ñ–ª—å–∫–æ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä–µ–º."""

    user_ids = request.ids

    if not user_ids:
        raise HTTPException(
            status_code=400,
            detail="No user IDs provided.",
        )

    # –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ –±–ª–æ–∫—É–≤–∞—Ç–∏ —Å–∞–º–æ–≥–æ —Å–µ–±–µ
    librarian_id = int(librarian["id"])
    if librarian_id in user_ids:
        raise HTTPException(
            status_code=400,
            detail="You cannot block your own account.",
        )

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —ó—Ö ID
    stmt = select(User).where(User.id.in_(user_ids))
    result = await db.execute(stmt)
    users = result.scalars().all()

    if not users:
        raise HTTPException(
            status_code=404,
            detail="No users found with the given IDs.",
        )

    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ —Ç–∏—Ö, —Ö—Ç–æ —â–µ –Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
    users_to_block = [user for user in users if not user.is_blocked]

    if not users_to_block:
        raise HTTPException(
            status_code=400,
            detail="All provided users are already blocked.",
        )

    # –ë–ª–æ–∫—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    for user in users_to_block:
        user.is_blocked = True

    await db.commit()

    return BulkUpdateResponse(
        message="Users blocked successfully",
        updated_items=[user.id for user in users_to_block],
    )


@router.patch("/users/unblock", response_model=BulkUpdateResponse)
async def unblock_users(
    request: BulkUpdateRequest,
    db: AsyncSession = Depends(get_db),
    _: dict = Depends(librarian_required),
):
    """üîì –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –∞–±–æ –∫—ñ–ª—å–∫–æ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä–µ–º."""

    user_ids = request.ids  # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

    if not user_ids:
        raise HTTPException(
            status_code=400,
            detail="No user IDs provided.",
        )

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —ó—Ö ID
    stmt = select(User).where(User.id.in_(user_ids))
    result = await db.execute(stmt)
    users = result.scalars().all()

    if not users:
        raise HTTPException(
            status_code=404,
            detail="No users found with the given IDs.",
        )

    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    users_to_unblock = [user for user in users if user.is_blocked]

    if not users_to_unblock:
        raise HTTPException(
            status_code=400,
            detail="No blocked users found in the provided list.",
        )

    # –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    for user in users_to_unblock:
        user.is_blocked = False

    await db.commit()

    return BulkUpdateResponse(
        message="Users unblocked successfully",
        updated_items=[user.id for user in users_to_unblock],
    )


# üîë –õ–æ–≥—ñ–Ω —á–µ—Ä–µ–∑ Swagger UI (OAuth2 Password Flow)
@router.post(
    "/sign-in-swagger",
    status_code=status.HTTP_200_OK,
    include_in_schema=False,
)
async def sign_in_swagger(
    form_data: OAuth2PasswordRequestForm = Depends(),
    db: AsyncSession = Depends(get_db),
):
    """üîÑ –í—Ö—ñ–¥ —á–µ—Ä–µ–∑ Swagger UI (OAuth2 Password Flow)"""

    email = form_data.username
    password = form_data.password

    user = await authenticate_user(db, email, password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid email or password",
        )

    access_token = create_access_token(user)

    return {
        "access_token": access_token,
        "token_type": "bearer",
    }


@router.post("/refresh-token", response_model=Token, status_code=200)
async def refresh_token(refresh_token: str, db: AsyncSession = Depends(get_db)):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è `access_token` –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `refresh_token`"""

    redis = await redis_client.get_redis()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ `refreshToken` —É —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É Redis
    if await redis.exists(f"blacklist:{refresh_token}"):
        raise HTTPException(status_code=401, detail="Refresh token is revoked")

    # –î–µ–∫–æ–¥—É—î–º–æ —Ç–æ–∫–µ–Ω
    token_data = decode_jwt_token(refresh_token)

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    result = await db.execute(select(User).where(User.id == int(token_data["user_id"])))
    user = result.scalar_one_or_none()

    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π `accessToken`, —â–æ –º—ñ—Å—Ç–∏—Ç—å –≤—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    new_access_token = create_access_token(user)

    return Token(
        access_token=new_access_token,
        refresh_token=refresh_token,
        token_type="bearer",
    )
