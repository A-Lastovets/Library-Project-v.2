import logging
from datetime import datetime, timedelta
from typing import Optional

from fastapi import APIRouter, Depends, HTTPException, Query, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import joinedload
from sqlalchemy.sql import and_, func

from app.dependencies.database import get_db
from app.models.book import Book, BookStatus
from app.models.reservation import Reservation, ReservationStatus
from app.schemas.schemas import BookResponse, ReservationCreate, ReservationResponse
from app.services.email_tasks import (
    send_book_checked_out_email,
    send_reservation_cancelled_email,
    send_reservation_confirmation_email,
    send_reservation_email,
    send_thank_you_email,
)
from app.services.user_service import (
    check_and_block_user,
    get_current_user_id,
    librarian_required,
)

router = APIRouter(tags=["Reservations"])

logger = logging.getLogger(__name__)


@router.post(
    "/reservations/reservation",
    response_model=ReservationResponse,
    status_code=status.HTTP_201_CREATED,
)
async def create_reservation(
    reservation_data: ReservationCreate,
    db: AsyncSession = Depends(get_db),
    user_id: int = Depends(get_current_user_id),
):

    await check_and_block_user(db, user_id)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Ç–∞ –∫–Ω–∏–≥–∏ –Ω–∞ —Ä—É–∫–∞—Ö
    result1 = await db.execute(
        select(func.count())
        .select_from(Reservation)
        .where(
            and_(
                Reservation.user_id == user_id,
                Reservation.status.in_(
                    [ReservationStatus.PENDING, ReservationStatus.CONFIRMED],
                ),
            ),
        ),
    )
    active_reservations_count = result1.scalar()

    result2 = await db.execute(
        select(func.count())
        .select_from(Book)
        .where(
            and_(
                Book.id.in_(
                    select(Reservation.book_id).where(
                        Reservation.user_id == user_id,
                        Reservation.status == ReservationStatus.CONFIRMED,
                    ),
                ),
                Book.status == BookStatus.CHECKED_OUT,
            ),
        ),
    )
    checked_out_books_count = result2.scalar()

    if active_reservations_count + checked_out_books_count >= 3:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="You have reached the limit of 3 active reservations or borrowed books."
            " Cancel a reservation or return a book before making a new reservation.",
        )

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–Ω–∏–≥—É
    result = await db.execute(
        select(Book)
        .options(joinedload(Book.reservations))
        .where(Book.id == reservation_data.book_id),
    )
    book = result.scalars().first()

    if not book:
        raise HTTPException(status_code=404, detail="Book not found")

    # üîπ **–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–Ω–∏–≥–∞ –≤–∂–µ –º–∞—î –∞–∫—Ç–∏–≤–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è**
    result_existing_reservation = await db.execute(
        select(Reservation).where(
            Reservation.book_id == book.id,
            Reservation.status.in_(
                [ReservationStatus.PENDING, ReservationStatus.CONFIRMED],
            ),
        ),
    )
    existing_reservation = result_existing_reservation.scalars().first()

    if existing_reservation:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="This book is already reserved by another user.",
        )

    if book.status != BookStatus.AVAILABLE:
        raise HTTPException(
            status_code=400,
            detail=f"Book is currently {book.status.lower()} and cannot be reserved.",
        )

    # –°—Ç–≤–æ—Ä—é—î–º–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    new_reservation = Reservation(
        book_id=book.id,
        user_id=user_id,
        status=ReservationStatus.PENDING,
        expires_at=datetime.now() + timedelta(days=5),
    )

    book.status = BookStatus.RESERVED

    db.add(new_reservation)
    await db.commit()
    await db.refresh(new_reservation, ["book"])

    result = await db.execute(
        select(Reservation)
        .options(joinedload(Reservation.user))
        .where(Reservation.id == new_reservation.id),
    )
    new_reservation = result.scalars().first()

    if not new_reservation.user:
        raise HTTPException(
            status_code=500,
            detail="User data not found for reservation.",
        )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ e-mail
    send_reservation_email(
        new_reservation.user.email,
        BookResponse.model_validate(book).model_dump(),
        new_reservation.expires_at.strftime("%Y-%m-%d"),
    )

    return new_reservation


@router.patch(
    "/reservations/{reservation_id}/confirm/librarian",
    response_model=ReservationResponse,
)
async def confirm_reservation_by_librarian(
    reservation_id: int,
    db: AsyncSession = Depends(get_db),
    _: dict = Depends(librarian_required),
):
    """–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (—á–∏—Ç–∞—á –º–∞—î 5 –¥–Ω—ñ–≤, —â–æ–± –∑–∞–±—Ä–∞—Ç–∏ –∫–Ω–∏–≥—É)."""

    result = await db.execute(
        select(Reservation)
        .options(joinedload(Reservation.book), joinedload(Reservation.user))
        .where(Reservation.id == reservation_id),
    )
    reservation = result.scalars().first()

    if not reservation:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Reservation not found",
        )

    if reservation.status != ReservationStatus.PENDING:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Reservation is not pending",
        )

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–Ω–∏–≥—É, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ —ó—ó —Å—Ç–∞—Ç—É—Å
    book = reservation.book

    if not book:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Associated book not found",
        )

    if book.status in [BookStatus.CHECKED_OUT, BookStatus.OVERDUE]:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Book is currently {book.status.lower()} and cannot be reserved.",
        )

    # –û–±–º–µ–∂–µ–Ω–Ω—è: –∫–Ω–∏–≥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–±—Ä–∞—Ç–∏ –ø—Ä–æ—Ç—è–≥–æ–º 5 –¥–Ω—ñ–≤
    reservation.expires_at = datetime.now() + timedelta(days=5)
    reservation.status = ReservationStatus.CONFIRMED

    await db.commit()
    await db.refresh(reservation, ["book", "user"])

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ e-mail –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    send_reservation_confirmation_email(
        reservation.user.email,
        BookResponse.model_validate(book).model_dump(),
        reservation.expires_at.strftime("%Y-%m-%d"),
    )

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    logger.info(
        f"Reservation {reservation.id} confirmed by librarian. Expires at: {reservation.expires_at}",
    )

    return reservation


@router.patch(
    "/reservations/{reservation_id}/confirm/user",
    response_model=ReservationResponse,
)
async def confirm_reservation_by_user(
    reservation_id: int,
    db: AsyncSession = Depends(get_db),
    user_id: int = Depends(get_current_user_id),
):
    """–ß–∏—Ç–∞—á –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î, —â–æ –∑–∞–±—Ä–∞–≤ –∫–Ω–∏–≥—É (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –≤—ñ–¥–ª—ñ–∫ 14 –¥–Ω—ñ–≤)."""

    result = await db.execute(
        select(Reservation)
        .options(joinedload(Reservation.book), joinedload(Reservation.user))
        .where(
            Reservation.id == reservation_id,
            Reservation.user_id
            == user_id,  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ª–∏—à–µ —Å–≤–æ—é –∫–Ω–∏–≥—É
            Reservation.status
            == ReservationStatus.CONFIRMED,  # –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–µ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä–µ–º
        ),
    )
    reservation = result.scalars().first()

    if not reservation:
        raise HTTPException(
            status_code=404,
            detail="Reservation not found or not eligible for confirmation",
        )

    # üìö –û—Ç—Ä–∏–º—É—î–º–æ –∫–Ω–∏–≥—É
    book = reservation.book  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—É –∫–Ω–∏–≥—É

    if not book:
        raise HTTPException(
            status_code=404,
            detail="Associated book not found",
        )

    if book.status == BookStatus.OVERDUE:
        raise HTTPException(
            status_code=400,
            detail="This book is already overdue and cannot be confirmed.",
        )

    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—Ç—Ä–∏–º—É—î 14 –¥–Ω—ñ–≤ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–∏–≥–æ—é
    reservation.expires_at = datetime.now() + timedelta(days=14)
    book.status = BookStatus.CHECKED_OUT  # –ö–Ω–∏–≥–∞ –≤–∏–¥–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É

    await db.commit()
    await db.refresh(reservation, ["book", "user"])

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ e-mail –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ 14 –¥–Ω—ñ–≤
    send_book_checked_out_email(
        reservation.user.email,
        book.title,
        reservation.expires_at.strftime("%Y-%m-%d"),
    )

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–Ω–∏–≥–∏
    logger.info(
        f"Reservation {reservation.id} confirmed by user. Due date: {reservation.expires_at}",
    )

    return reservation


@router.patch(
    "/reservations/{reservation_id}/decline/librarian",
    response_model=ReservationResponse,
)
async def decline_reservation_librarian(
    reservation_id: int,
    db: AsyncSession = Depends(get_db),
    _: dict = Depends(librarian_required),
):
    """–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä —Å–∫–∞—Å–æ–≤—É—î –±—É–¥—å-—è–∫–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""

    result = await db.execute(
        select(Reservation)
        .options(joinedload(Reservation.book), joinedload(Reservation.user))
        .where(Reservation.id == reservation_id),
    )
    reservation = result.scalars().first()

    if not reservation:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Reservation not found",
        )

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–Ω–∏–≥—É
    book = reservation.book
    if not book:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Associated book not found",
        )

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω—É –∫–Ω–∏–≥—É
    if book.status == BookStatus.CHECKED_OUT:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="This book is already checked out and cannot be cancelled. The user must return it first.",
        )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–Ω–∏–≥–∏ —Ç–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    book.status = BookStatus.AVAILABLE  # –ö–Ω–∏–≥–∞ –∑–Ω–æ–≤—É –¥–æ—Å—Ç—É–ø–Ω–∞
    reservation.status = ReservationStatus.CANCELLED  # –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ

    await db.commit()
    await db.refresh(reservation, ["book", "user"])

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ e-mail –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    send_reservation_cancelled_email(
        reservation.user.email,
        book.title,
    )

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    logger.info(
        f"Reservation {reservation.id} was cancelled by librarian. Book {book.title} is now available.",
    )

    return reservation


@router.patch(
    "/reservations/{reservation_id}/decline/user",
    response_model=ReservationResponse,
)
async def decline_reservation_user(
    reservation_id: int,
    db: AsyncSession = Depends(get_db),
    user_id: int = Depends(get_current_user_id),
):
    """–ß–∏—Ç–∞—á —Å–∫–∞—Å–æ–≤—É—î –°–í–û–Ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""

    result = await db.execute(
        select(Reservation)
        .options(
            joinedload(Reservation.book),
            joinedload(Reservation.user),
        )
        .where(Reservation.id == reservation_id),
    )
    reservation = result.scalars().first()

    if not reservation:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Reservation not found",
        )

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
    if reservation.user_id != user_id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="You can only cancel your own reservations",
        )

    book = reservation.book
    if not book:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Associated book not found",
        )

    # –ó–∞–±–æ—Ä–æ–Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –∫–Ω–∏–≥–∞ –≤–∂–µ `CHECKED_OUT`
    if book.status == BookStatus.CHECKED_OUT:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="You cannot cancel this reservation because you have already taken the book. Please return it instead.",
        )

    # –î–æ–∑–≤–æ–ª—è—î–º–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è `PENDING` –∞–±–æ `CONFIRMED`
    if reservation.status not in [
        ReservationStatus.PENDING,
        ReservationStatus.CONFIRMED,
    ]:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Only pending or confirmed reservations can be cancelled.",
        )

    # **–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Ç–∞ –∫–Ω–∏–≥–∏**
    book.status = BookStatus.AVAILABLE
    reservation.status = ReservationStatus.CANCELLED

    await db.commit()
    await db.refresh(
        reservation,
        ["book", "user"],
    )

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ e-mail –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    send_reservation_cancelled_email(
        reservation.user.email,
        book.title,
    )

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó
    logger.info(
        f"User {user_id} cancelled reservation {reservation.id}. Book {book.title} is now available.",
    )

    return reservation


@router.patch(
    "/reservations/{reservation_id}/return",
    response_model=ReservationResponse,
)
async def confirm_book_return(
    reservation_id: int,
    db: AsyncSession = Depends(get_db),
    _: dict = Depends(librarian_required),
):
    """–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–Ω–∏–≥–∏. –°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω—é—î—Ç—å—Å—è –Ω–∞ AVAILABLE."""

    result = await db.execute(
        select(Reservation)
        .options(joinedload(Reservation.book), joinedload(Reservation.user))
        .where(Reservation.id == reservation_id),
    )
    reservation = result.scalars().first()

    if not reservation:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Reservation not found",
        )

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–Ω–∏–≥—É
    book = reservation.book
    if not book:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Associated book not found",
        )

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–Ω–∏–≥–∞ –±—É–ª–∞ –≤–∏–¥–∞–Ω–∞ —á–∏—Ç–∞—á–µ–≤—ñ
    if book.status != BookStatus.CHECKED_OUT:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="This book is not currently checked out.",
        )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–Ω–∏–≥–∏ —Ç–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    book.status = BookStatus.AVAILABLE  # –ö–Ω–∏–≥–∞ –∑–Ω–æ–≤—É –¥–æ—Å—Ç—É–ø–Ω–∞
    reservation.status = ReservationStatus.COMPLETED  # –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–µ

    await db.commit()
    await db.refresh(reservation, ["book", "user"])

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ e-mail –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–Ω–∏–≥–∏
    send_thank_you_email(
        reservation.user.email,
        BookResponse.model_validate(book).model_dump(),
    )

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó
    logger.info(
        f"Librarian confirmed return of book '{book.title}' for user {reservation.user.email}.",
    )

    return reservation


@router.get("/reservations/librarian/all", response_model=list[ReservationResponse])
async def get_reservations(
    db: AsyncSession = Depends(get_db),
    _: dict = Depends(librarian_required),
    status: Optional[ReservationStatus] = Query(
        None,
        description="–§—ñ–ª—å—Ç—Ä –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è",
    ),
):
    """üìÑ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—è) –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º."""
    query = select(Reservation).options(
        joinedload(Reservation.book),
        joinedload(Reservation.user),
    )

    if status:  # –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç–∞—Ç—É—Å—É, –¥–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä
        query = query.where(Reservation.status == status)

    result = await db.execute(query)
    reservations = result.scalars().unique().all()

    if not reservations:
        raise HTTPException(
            status_code=404,
            detail="No reservations found with the given criteria.",
        )

    return reservations


@router.get("/reservations/user/all", response_model=list[ReservationResponse])
async def get_user_reservations(
    db: AsyncSession = Depends(get_db),
    user_id: int = Depends(get_current_user_id),
    status: Optional[ReservationStatus] = Query(
        None,
        description="–§—ñ–ª—å—Ç—Ä –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (PENDING, CONFIRMED, CANCELLED, EXPIRED)",
    ),
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó."""

    query = (
        select(Reservation)
        .options(
            joinedload(Reservation.book),  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–Ω–∏–≥—É
            joinedload(Reservation.user),  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        )
        .where(Reservation.user_id == user_id)
    )

    if status:  # –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç–∞—Ç—É—Å—É, –¥–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä
        query = query.where(Reservation.status == status)
    else:
        # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (—Ç—ñ, —â–æ —â–µ –Ω–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å)
        query = query.where(
            Reservation.status.in_(
                [ReservationStatus.PENDING, ReservationStatus.CONFIRMED],
            ),
        )

    result = await db.execute(query)
    reservations = result.scalars().unique().all()

    if not reservations:
        raise HTTPException(
            status_code=404,
            detail="No active reservations found.",
        )

    return reservations
