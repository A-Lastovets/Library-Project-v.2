from datetime import datetime, timedelta
from typing import Optional

from fastapi import APIRouter, Depends, HTTPException, Query, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import joinedload

from app.dependencies.database import get_db
from app.models.book import Book, BookStatus
from app.models.reservation import Reservation, ReservationStatus
from app.schemas.schemas import ReservationCreate, ReservationResponse
from app.services.user_service import get_current_user_id, librarian_required

router = APIRouter(tags=["Reservations"])


@router.post(
    "/reservations/reservation",
    response_model=ReservationResponse,
    status_code=status.HTTP_201_CREATED,
)
async def create_reservation(
    reservation_data: ReservationCreate,
    db: AsyncSession = Depends(get_db),
    user_id: int = Depends(get_current_user_id),
):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∫–Ω–∏–≥–∏ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∫–Ω–∏–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)."""
    result = await db.execute(
        select(Book)
        .options(joinedload(Book.reservations))
        .where(Book.id == reservation_data.book_id),
    )
    book = result.scalars().first()

    if not book:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Book not found",
        )

    if book.status != BookStatus.AVAILABLE:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Book is not available for reservation",
        )

    new_reservation = Reservation(
        book_id=book.id,
        user_id=user_id,
        status=ReservationStatus.PENDING,
        expires_at=datetime.now() + timedelta(days=5),
    )

    db.add(new_reservation)
    book.status = BookStatus.RESERVED

    db.add(new_reservation)
    await db.commit()
    await db.refresh(new_reservation, ["book"])

    return new_reservation


@router.patch(
    "/reservations/reservation_id/{reservation_id}/confirm",
    response_model=ReservationResponse,
)
async def confirm_reservation(
    reservation_id: int,
    db: AsyncSession = Depends(get_db),
    _: dict = Depends(librarian_required),
):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä–µ–º (–æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–Ω–∏–≥–∏ 5 –¥–Ω—ñ–≤)."""

    result = await db.execute(
        select(Reservation)
        .options(joinedload(Reservation.book))  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ book —Ä–∞–∑–æ–º —ñ–∑ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è–º
        .where(Reservation.id == reservation_id),
    )
    reservation = result.scalars().first()

    if not reservation:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Reservation not found",
        )

    if reservation.status != ReservationStatus.PENDING:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Reservation is not pending",
        )

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–Ω–∏–≥—É, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ —ó—ó —Å—Ç–∞—Ç—É—Å
    book = await db.get(Book, reservation.book_id)
    if not book:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Associated book not found",
        )

    book.status = BookStatus.CHECKED_OUT  # –ö–Ω–∏–≥–∞ –≤–∏–¥–∞—î—Ç—å—Å—è —á–∏—Ç–∞—á–µ–≤—ñ

    # –û–±–º–µ–∂–µ–Ω–Ω—è: –∫–Ω–∏–≥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–±—Ä–∞—Ç–∏ –ø—Ä–æ—Ç—è–≥–æ–º 5 –¥–Ω—ñ–≤
    reservation.expires_at = datetime.now() + timedelta(days=5)
    reservation.status = ReservationStatus.CONFIRMED

    await db.commit()
    await db.refresh(reservation, ["book"])

    return reservation


@router.patch(
    "/reservations/reservation_id/{reservation_id}/decline",
    response_model=ReservationResponse,
)
async def decline_reservation(
    reservation_id: int,
    db: AsyncSession = Depends(get_db),
    user_id: int = Depends(get_current_user_id),
    librarian: dict = Depends(librarian_required),
):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∞–±–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä–µ–º."""

    reservation = await db.get(Reservation, reservation_id)

    if not reservation:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Reservation not found",
        )

    # –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä –º–æ–∂–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –±—É–¥—å-—è–∫–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    if reservation.user_id != user_id and not librarian:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="You can only cancel your own reservations",
        )

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–Ω–∏–≥—É
    book = await db.get(Book, reservation.book_id)
    if not book:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Associated book not found",
        )

    book.status = BookStatus.AVAILABLE  # –ö–Ω–∏–≥–∞ –∑–Ω–æ–≤—É –¥–æ—Å—Ç—É–ø–Ω–∞

    reservation.status = ReservationStatus.CANCELLED

    await db.commit()
    await db.refresh(reservation, ["book"])

    return reservation


@router.get("/reservations/all", response_model=list[ReservationResponse])
async def get_reservations(
    db: AsyncSession = Depends(get_db),
    _: dict = Depends(librarian_required),
    status: Optional[ReservationStatus] = Query(
        None,
        description="–§—ñ–ª—å—Ç—Ä –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è",
    ),
):
    """üìÑ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—è) –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º."""
    query = select(Reservation).options(joinedload(Reservation.book))

    if status:  # –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç–∞—Ç—É—Å—É, –¥–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä
        query = query.where(Reservation.status == status)

    result = await db.execute(query)
    reservations = result.scalars().unique().all()

    if not reservations:
        raise HTTPException(
            status_code=404,
            detail="No reservations found with the given criteria.",
        )

    return reservations
