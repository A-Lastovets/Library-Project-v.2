import logging
from datetime import datetime, timedelta
from typing import Optional

from fastapi import APIRouter, Depends, HTTPException, Query, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import joinedload
from sqlalchemy.sql import func

from app.dependencies.database import get_db
from app.exceptions.pagination import paginate_response
from app.models.book import BookStatus
from app.models.reservation import Reservation, ReservationStatus
from app.schemas.schemas import BookResponse, ReservationResponse
from app.services.email_tasks import (
    send_book_checked_out_email,
    send_reservation_cancelled_email,
    send_reservation_confirmation_email,
    send_thank_you_email,
)
from app.services.user_service import librarian_required

router = APIRouter(prefix="/reservations", tags=["Librarian Reservations"])

logger = logging.getLogger(__name__)


@router.patch(
    "/{reservation_id}/confirm/librarian",
    response_model=ReservationResponse,
)
async def confirm_reservation_by_librarian(
    reservation_id: int,
    db: AsyncSession = Depends(get_db),
    _: dict = Depends(librarian_required),
):
    """–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (—á–∏—Ç–∞—á –º–∞—î 5 –¥–Ω—ñ–≤, —â–æ–± –∑–∞–±—Ä–∞—Ç–∏ –∫–Ω–∏–≥—É)."""

    result = await db.execute(
        select(Reservation)
        .options(joinedload(Reservation.book), joinedload(Reservation.user))
        .where(Reservation.id == reservation_id),
    )
    reservation = result.scalars().first()

    if not reservation:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Reservation not found",
        )

    if reservation.status != ReservationStatus.PENDING:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Reservation is not pending",
        )

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–Ω–∏–≥—É, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ —ó—ó —Å—Ç–∞—Ç—É—Å
    book = reservation.book

    if not book:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Associated book not found",
        )

    if book.status in [BookStatus.CHECKED_OUT, BookStatus.OVERDUE]:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Book is currently {book.status.lower()} and cannot be reserved.",
        )

    # –û–±–º–µ–∂–µ–Ω–Ω—è: –∫–Ω–∏–≥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–±—Ä–∞—Ç–∏ –ø—Ä–æ—Ç—è–≥–æ–º 5 –¥–Ω—ñ–≤
    reservation.expires_at = datetime.now() + timedelta(days=5)
    reservation.status = ReservationStatus.CONFIRMED

    await db.commit()
    await db.refresh(reservation, ["book", "user"])

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ e-mail –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    send_reservation_confirmation_email(
        reservation.user.email,
        BookResponse.model_validate(book).model_dump(),
        reservation.expires_at.strftime("%Y-%m-%d %H:%M"),
    )

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    logger.info(
        f"Reservation {reservation.id} confirmed by librarian. Expires at: {reservation.expires_at}",
    )

    return reservation


@router.patch(
    "/{reservation_id}/decline/librarian",
    response_model=ReservationResponse,
)
async def decline_reservation_by_librarian(
    reservation_id: int,
    db: AsyncSession = Depends(get_db),
    _: dict = Depends(librarian_required),
):
    """–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä —Å–∫–∞—Å–æ–≤—É—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""

    result = await db.execute(
        select(Reservation)
        .options(joinedload(Reservation.book), joinedload(Reservation.user))
        .where(Reservation.id == reservation_id),
    )
    reservation = result.scalars().first()

    if not reservation:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Reservation not found",
        )

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–Ω–∏–≥—É
    book = reservation.book
    if not book:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Associated book not found",
        )

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω—É –∫–Ω–∏–≥—É
    if book.status in [BookStatus.CHECKED_OUT, BookStatus.OVERDUE]:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="This book is already checked out or overdue and cannot be cancelled. The user must return it first.",
        )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–Ω–∏–≥–∏ —Ç–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    book.status = BookStatus.AVAILABLE  # –ö–Ω–∏–≥–∞ –∑–Ω–æ–≤—É –¥–æ—Å—Ç—É–ø–Ω–∞
    reservation.status = ReservationStatus.CANCELLED  # –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ
    reservation.cancelled_by = "librarian"

    await db.commit()
    await db.refresh(reservation, ["book", "user"])

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ e-mail –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    send_reservation_cancelled_email(
        reservation.user.email,
        book.title,
        cancelled_by="librarian",
    )

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    logger.info(
        f"Reservation {reservation.id} was cancelled by librarian. Book {book.title} is now available.",
    )

    return reservation


@router.patch(
    "/{reservation_id}/checkout/librarian",
    response_model=ReservationResponse,
)
async def confirm_book_checkout_by_librarian(
    reservation_id: int,
    db: AsyncSession = Depends(get_db),
    _: dict = Depends(librarian_required),
):
    """–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î, —â–æ –≤–∏–¥–∞–≤ –∫–Ω–∏–≥—É —á–∏—Ç–∞—á—É (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –≤—ñ–¥–ª—ñ–∫ 14 –¥–Ω—ñ–≤)."""

    result = await db.execute(
        select(Reservation)
        .options(joinedload(Reservation.book), joinedload(Reservation.user))
        .where(
            Reservation.id == reservation_id,
            Reservation.status == ReservationStatus.CONFIRMED,
        ),
    )
    reservation = result.scalars().first()

    if not reservation:
        raise HTTPException(
            status_code=404,
            detail="Reservation not found or not eligible for confirmation",
        )

    book = reservation.book  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—É –∫–Ω–∏–≥—É

    if not book:
        raise HTTPException(
            status_code=404,
            detail="Associated book not found",
        )

    if book.status != BookStatus.RESERVED:
        raise HTTPException(
            status_code=400,
            detail="Book is not in 'reserved' status and cannot be issued.",
        )

    reservation.expires_at = datetime.now() + timedelta(days=14)
    reservation.status = ReservationStatus.ACTIVE
    book.status = BookStatus.CHECKED_OUT  # –ö–Ω–∏–≥–∞ –≤–∏–¥–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É

    await db.commit()
    await db.refresh(reservation, ["book", "user"])

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ e-mail –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ 14 –¥–Ω—ñ–≤
    send_book_checked_out_email(
        reservation.user.email,
        book.title,
        reservation.expires_at.strftime("%Y-%m-%d %H:%M"),
    )

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞—á—ñ –∫–Ω–∏–≥–∏
    logger.info(
        f"Reservation {reservation.id} confirmed by librarian. Due date: {reservation.expires_at}",
    )

    return reservation


@router.patch(
    "/{reservation_id}/return/librarian",
    response_model=ReservationResponse,
)
async def confirm_book_return_by_librarian(
    reservation_id: int,
    db: AsyncSession = Depends(get_db),
    _: dict = Depends(librarian_required),
):
    """–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–Ω–∏–≥–∏. –°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω—é—î—Ç—å—Å—è –Ω–∞ AVAILABLE."""

    result = await db.execute(
        select(Reservation)
        .options(joinedload(Reservation.book), joinedload(Reservation.user))
        .where(Reservation.id == reservation_id),
    )
    reservation = result.scalars().first()

    if not reservation:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Reservation not found",
        )

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–Ω–∏–≥—É
    book = reservation.book
    if not book:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Associated book not found",
        )

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–Ω–∏–≥–∞ –±—É–ª–∞ –≤–∏–¥–∞–Ω–∞ —á–∏—Ç–∞—á–µ–≤—ñ
    if book.status not in {BookStatus.CHECKED_OUT, BookStatus.OVERDUE}:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="This book is not currently checked out or overdue.",
        )

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–Ω–∏–≥–∏ —Ç–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    book.status = BookStatus.AVAILABLE  # –ö–Ω–∏–≥–∞ –∑–Ω–æ–≤—É –¥–æ—Å—Ç—É–ø–Ω–∞
    reservation.status = ReservationStatus.COMPLETED  # –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–µ

    await db.commit()
    await db.refresh(reservation, ["book", "user"])

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ e-mail –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–Ω–∏–≥–∏
    send_thank_you_email(
        reservation.user.email,
        BookResponse.model_validate(book).model_dump(),
    )

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó
    logger.info(
        f"Librarian confirmed return of book '{book.title}' for user {reservation.user.email}.",
    )

    return reservation


@router.get("/librarian/all", response_model=dict)
async def get_reservations(
    db: AsyncSession = Depends(get_db),
    _: dict = Depends(librarian_required),
    status: Optional[ReservationStatus] = Query(
        None,
        description="–§—ñ–ª—å—Ç—Ä –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è",
    ),
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏"),
    per_page: int = Query(10, ge=1, le=100, description="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤"),
):
    """üìÑ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—è) –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó."""
    query = select(Reservation).options(
        joinedload(Reservation.book),
        joinedload(Reservation.user),
    )

    if status is not None:
        query = query.where(Reservation.status == status)

    total_reservations = await db.scalar(
        select(func.count()).select_from(query.subquery()),
    )

    result = await db.execute(
        query.order_by(Reservation.created_at.desc())
        .limit(per_page)
        .offset((page - 1) * per_page),
    )
    reservations = result.scalars().unique().all()

    return paginate_response(
        total=total_reservations,
        page=page,
        per_page=per_page,
        items=[ReservationResponse.model_validate(r) for r in reservations],
    )
