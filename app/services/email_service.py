import logging
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

from app.config import config

logger = logging.getLogger(__name__)


class EmailClient:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è SMTP-–∑'—î–¥–Ω–∞–Ω–Ω—è."""

    def __init__(self):
        self.server = None

    def __enter__(self):
        try:
            if config.SMTP_PORT == 587:
                self.server = smtplib.SMTP(config.SMTP_SERVER, config.SMTP_PORT)
                self.server.starttls()
            elif config.SMTP_PORT == 465:
                self.server = smtplib.SMTP_SSL(config.SMTP_SERVER, config.SMTP_PORT)
            else:
                raise ValueError("Unsupported SMTP port. Use 587 (TLS) or 465 (SSL).")

            self.server.login(config.SMTP_USERNAME, config.SMTP_PASSWORD)
            return self.server
        except Exception as e:
            logger.error(f"Failed to connect to SMTP server: {e}")
            raise

    def __exit__(self, exc_type, exc_value, traceback):
        if self.server:
            self.server.quit()


async def send_email(to_email: str, subject: str, message: str, html=False):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è email –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    try:
        msg = MIMEMultipart()
        msg["From"] = config.EMAIL_FROM
        msg["To"] = to_email
        msg["Subject"] = subject

        footer = """
        --
        This is an automated message. Please do not reply.

        - Your Support Team
        """

        if html:
            full_message = f"{message}<br><br><p>--<br>This is an automated message. Please do not reply.<br><br>- Your Support Team</p>"
            msg.attach(MIMEText(full_message, "html"))
        else:
            msg.attach(MIMEText(message + footer, "plain"))

        with EmailClient() as server:
            server.sendmail(config.EMAIL_FROM, to_email, msg.as_string())

        logger.info(f"Email sent successfully to {to_email}")
        return {"message": "Email sent successfully"}

    except smtplib.SMTPException as e:
        logger.error(f"SMTP error: {e}")
        return {"error": f"SMTP error: {e}"}
    except Exception as e:
        logger.error(f"General email error: {e}")
        return {"error": f"General error: {e}"}


async def send_reservation_cancellation_email(user_email: str, book_title: str):
    """üì© –í—ñ–¥–ø—Ä–∞–≤–ª—è—î email –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""
    subject = "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ"
    body = f"–í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∫–Ω–∏–≥–∏ '{book_title}' –±—É–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–∏ –Ω–µ –∑–∞–±—Ä–∞–ª–∏ —ó—ó –≤—á–∞—Å–Ω–æ."
    await send_email(user_email, subject, body)


async def send_return_reminder_email(user_email: str, book_title: str, due_date: str):
    """üì© –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–Ω–∏–≥–∏."""
    subject = "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–Ω–∏–≥–∏"
    body = (
        f"–ù–∞–≥–∞–¥—É—î–º–æ, —â–æ —Ç–µ—Ä–º—ñ–Ω –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–Ω–∏–≥–∏ '{book_title}' –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è {due_date}.\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å —ó—ó –≤—á–∞—Å–Ω–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —à—Ç—Ä–∞—Ñ—ñ–≤."
    )
    await send_email(user_email, subject, body)
