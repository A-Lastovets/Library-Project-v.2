import asyncio
import logging
from datetime import datetime, timedelta

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import joinedload

from app.dependencies.database import get_db
from app.models.book import Book, BookStatus
from app.models.reservation import Reservation, ReservationStatus
from app.models.user import User
from app.services.celery import celery_app
from app.services.email_service import (
    send_email,
    send_reservation_cancellation_email,
    send_return_reminder_email,
)

logger = logging.getLogger(__name__)


def get_db_session() -> AsyncSession:
    """–û—Ç—Ä–∏–º—É—î —Å–µ—Å—ñ—é –ë–î –¥–ª—è Celery-–∑–∞–≤–¥–∞–Ω—å."""
    return next(get_db())


@celery_app.task(bind=True, max_retries=3)
def send_password_reset_email(self, email: str, reset_link: str):
    """üì© –ù–∞–¥—Å–∏–ª–∞—î –ª–∏—Å—Ç –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è."""
    subject = "Password Reset Request"
    message = f"""
    <html>
        <body>
            <p>Hello,</p>
            <p>You requested a password reset. Click the link below to reset your password:</p>
            <p><a href="{reset_link}" style="font-size: 16px; color: #007bff; text-decoration: none;">Reset Password</a></p>
            <p>If you did not request this, please ignore this email.</p>
        </body>
    </html>
    """
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ create_task, —è–∫—â–æ Celery –≤–∂–µ –ø—Ä–∞—Ü—é—î –≤ event loop
            loop.create_task(send_email(email, subject, message, html=True))
        else:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop, –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π
            asyncio.run(send_email(email, subject, message, html=True))

        logger.info(f"Password reset email sent to {email}")
    except Exception as e:
        logger.error(f"Error sending password reset email to {email}: {e}")
        raise self.retry(exc=e, countdown=10)  # –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫


@celery_app.task
def check_expired_reservations():
    """üõë –ü–µ—Ä–µ–≤—ñ—Ä—è—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, —è–∫—ñ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ (–º–∏–Ω—É–ª–æ 5 –¥–Ω—ñ–≤), —ñ —Å–∫–∞—Å–æ–≤—É—î —ó—Ö."""
    db: AsyncSession = get_db_session()
    now = datetime.now()

    result = db.execute(
        select(Reservation)
        .options(
            joinedload(Reservation.book),
            joinedload(Reservation.user),
        )  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–≤'—è–∑–∞–Ω—ñ –æ–±'—î–∫—Ç–∏
        .where(
            Reservation.expires_at < now,
            Reservation.status == ReservationStatus.PENDING,
        ),
    )

    expired_reservations = result.scalars().all()

    for reservation in expired_reservations:
        book: Book = reservation.book
        user: User = reservation.user

        reservation.status = ReservationStatus.CANCELLED
        book.status = BookStatus.AVAILABLE

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É email –±–µ–∑ asyncio.run()
        asyncio.run(send_reservation_cancellation_email(user.email, book.title))

    db.commit()


@celery_app.task
def send_return_reminders():
    """üì© –ù–∞–¥—Å–∏–ª–∞—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–Ω–∏–≥ –∑–∞ 3 –¥–Ω—ñ –¥–æ –¥–µ–¥–ª–∞–π–Ω—É."""
    db: AsyncSession = get_db_session()
    now = datetime.now()
    reminder_date = now + timedelta(days=3)

    result = db.execute(
        select(Reservation)
        .options(
            joinedload(Reservation.book),
            joinedload(Reservation.user),
        )  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–≤'—è–∑–∞–Ω—ñ –æ–±'—î–∫—Ç–∏
        .where(
            Reservation.expires_at == reminder_date,
            Reservation.status == ReservationStatus.CONFIRMED,
        ),
    )
    reservations = result.scalars().all()

    for reservation in reservations:
        book: Book = reservation.book
        user: User = reservation.user

        asyncio.run(
            send_return_reminder_email(
                user.email,
                book.title,
                reservation.expires_at.strftime("%Y-%m-%d"),
            ),
        )

    db.commit()
