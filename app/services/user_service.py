from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from passlib.context import CryptContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from app.models.user import User
from app.utils import decode_jwt_token

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/sign-in-swagger")


# –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ email
async def get_user_by_email(db: AsyncSession, email: str) -> User | None:
    result = await db.execute(select(User).where(User.email == email.lower()))
    return result.scalar_one_or_none()


# –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ —Ç–æ–∫–µ–Ω–æ–º
def get_current_user_id(token: str = Depends(oauth2_scheme)) -> int:
    """–û—Ç—Ä–∏–º—É—î–º–æ user_id –∑ JWT —Ç–æ–∫–µ–Ω–∞"""
    token_data = decode_jwt_token(token)
    user_id = int(token_data["user_id"])
    print(f"üîπ –û—Ç—Ä–∏–º–∞–Ω–æ user_id: {user_id}")  # –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    return int(token_data["user_id"])


# –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def authenticate_user(db: AsyncSession, email: str, password: str) -> User | None:
    result = await db.execute(select(User).where(User.email == email))
    user = result.scalar_one_or_none()

    if not user or not pwd_context.verify(password, user.hashed_password):
        return None
    return user


async def librarian_required(token: str = Depends(oauth2_scheme)):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–ª—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ä—è —á–µ—Ä–µ–∑ JWT-—Ç–æ–∫–µ–Ω."""
    token_data = decode_jwt_token(token)
    role = token_data.get("role")

    if role != "librarian":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Access denied: Librarian role required",
        )

    return token_data
