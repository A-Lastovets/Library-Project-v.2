services:
  alembic:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      app:
        condition: service_started
    environment:
      DATABASE_URL: ${DATABASE_URL}  # Хмарна база PostgreSQL
      MAKE_MIGRATIONS: ${MAKE_MIGRATIONS:-false}
      MAKE_MIGRATION_DOWNGRADE: ${MAKE_MIGRATION_DOWNGRADE:-false}
      MIGRATION_DOWNGRADE_TARGET: ${MIGRATION_DOWNGRADE_TARGET:-63017c98c3da}
    command: >
      sh -c "[ "$MAKE_MIGRATIONS" = "true" ] && alembic revision --autogenerate -m 'auto detect changes';
             [ "$MAKE_MIGRATION_DOWNGRADE" = "true" ] && alembic downgrade "$MIGRATION_DOWNGRADE_TARGET";
             [ "$MAKE_MIGRATION_DOWNGRADE" != "true" ] && alembic upgrade head"
    volumes:
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
    networks:
      - app_network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: on-failure
    container_name: fastapi_app
    ports:
      - "5001:5000"
    environment:
      DATABASE_URL: ${DATABASE_URL}  # Хмарна база PostgreSQL
      REDIS_URL: ${REDIS_URL}  # Хмарний Redis
    depends_on:
      alembic:
        condition: service_started
    networks:
      - app_network

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    container_name: celery_worker
    command: celery -A app.services.celery worker --loglevel=info
    environment:
      DATABASE_URL: ${DATABASE_URL}  # Хмарна база PostgreSQL
      REDIS_URL: ${REDIS_URL}  # Хмарний Redis
    depends_on:
      app:
        condition: service_started
    networks:
      - app_network

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    container_name: celery_beat
    command: celery -A app.services.celery beat --loglevel=info
    environment:
      DATABASE_URL: ${DATABASE_URL}  # Хмарна база PostgreSQL
      REDIS_URL: ${REDIS_URL}  # Хмарний Redis
    depends_on:
      celery_worker:
        condition: service_started
    networks:
      - app_network

networks:
  app_network:
    driver: bridge
